/*////////////////////////////////
	Zachary Hipps
	Self Balancing Robot
	Copyright 2016
////////////////////////////////*/

// Libraries
#include <ADXL345.h>

//#include <gfxfont.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <PID_v1.h>
/////////////////////////////////
// accelerometer variables
ADXL345 accel;
int ax_raw=0, ay_raw=0, az_raw=0; // Stores raw data from registers
int aoffset_x=0, aoffset_y=0, aoffset_z=0; // Stores static offset
double ax = 0.0, ax_filtered = 0.0, ay = 0.0, ay_filtered = 0.0, az = 0.0, az_filtered = 0.0; 
/////////////////////////////////
// misc variabls
double compAlpha = 0.75;
/////////////////////////////////
// motorPID variabls
double motorSetpoint = 0, motorPWM = 0, motorKp = 5.0, motorKi = 0, motorKd = 2;
PID motorPID(&ax_filtered, &motorPWM, &motorSetpoint,motorKp,motorKi,motorKd,DIRECT);
#define MOTOR_LEFT_DIR 7
#define MOTOR_LEFT_PWM 9
#define MOTOR_RIGHT_DIR 8
#define MOTOR_RIGHT_PWM 10
//#define FORWARD HIGH
//#define BACKWARD LOW
/////////////////////////////////
// display variabls
Adafruit_SSD1306 oled(0);
/*static const unsigned char PROGMEM elite[] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x1F, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x03, 0xFF, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x0F, 0xFF, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x1F, 0xFF, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x3F, 0xFF, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x7F, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x03, 0xFF, 0xFF, 0xFF, 0xF8, 0x7F, 0x0F, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x03, 0xFF, 0xFF, 0xFF, 0xF0, 0x7F, 0x0F, 0xE0, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x07, 0xFF, 0xFF, 0xFF, 0xE0, 0x7F, 0x0F, 0xE0, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x07, 0xFF, 0xFF, 0xFF, 0x00, 0x7F, 0x0F, 0xE0, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x0F, 0xFF, 0xFF, 0xFE, 0x00, 0x7F, 0x0F, 0xE0, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x0F, 0xFF, 0xF8, 0x3C, 0x00, 0x7F, 0x0F, 0xE0, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x0F, 0xFF, 0xDC, 0x1C, 0x00, 0x7F, 0x00, 0x00, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x1F, 0xFF, 0x8E, 0x1C, 0x00, 0x7F, 0x00, 0x00, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x1F, 0xFF, 0x0F, 0xFF, 0x00, 0x7F, 0x0F, 0xE7, 0xFF, 0xC0, 0xFF, 0xC0, 0x00, 0x00, 0x00,
0x00, 0x1F, 0xFF, 0x07, 0xFF, 0xC0, 0x7F, 0x0F, 0xE7, 0xFF, 0xC1, 0xFF, 0xF0, 0x00, 0x00, 0x00,
0x00, 0x1F, 0xFE, 0x0F, 0xFF, 0xE0, 0x7F, 0x0F, 0xE7, 0xFF, 0xC3, 0xFF, 0xF8, 0x00, 0x00, 0x00,
0x00, 0x1F, 0xFE, 0x1F, 0xFF, 0xF0, 0x7F, 0x0F, 0xE7, 0xFF, 0xC7, 0xFF, 0xF8, 0x00, 0x00, 0x00,
0x00, 0x1F, 0xFE, 0x1F, 0xFF, 0xF0, 0x7F, 0x0F, 0xE7, 0xFF, 0xCF, 0xFF, 0xFC, 0x00, 0x00, 0x00,
0x00, 0x1F, 0xFE, 0x3F, 0xC3, 0xF8, 0x7F, 0x0F, 0xE0, 0xFC, 0x0F, 0xE1, 0xFC, 0x00, 0x00, 0x00,
0x00, 0x1F, 0xFE, 0x3F, 0x83, 0xF8, 0x7F, 0x0F, 0xE0, 0xFC, 0x1F, 0xC0, 0xFE, 0x00, 0x00, 0x00,
0x00, 0x1F, 0xFE, 0x3F, 0x01, 0xF8, 0x7F, 0x0F, 0xE0, 0xFC, 0x1F, 0xC0, 0x7E, 0x00, 0x00, 0x00,
0x00, 0x1F, 0xFE, 0x7F, 0x01, 0xF8, 0x7F, 0x0F, 0xE0, 0xFC, 0x1F, 0xC0, 0x7E, 0x00, 0x00, 0x00,
0x00, 0x1F, 0xFF, 0x7F, 0xFF, 0xF8, 0x7F, 0x0F, 0xE0, 0xFC, 0x1F, 0xFF, 0xFE, 0x00, 0x00, 0x00,
0x00, 0x1F, 0xFF, 0xFF, 0xFF, 0xFC, 0x7F, 0x0F, 0xE0, 0xFC, 0x1F, 0xFF, 0xFE, 0x00, 0x00, 0x00,
0x00, 0x1F, 0xFF, 0xFF, 0xFF, 0xFC, 0x7F, 0x0F, 0xE0, 0xFC, 0x1F, 0xFF, 0xFE, 0x00, 0x00, 0x00,
0x00, 0x1F, 0xFF, 0xFF, 0xFF, 0xFC, 0x7F, 0x0F, 0xE0, 0xFC, 0x1F, 0xFF, 0xFE, 0x00, 0x00, 0x00,
0x00, 0x0F, 0xFF, 0xFF, 0x00, 0x00, 0x7F, 0x0F, 0xE0, 0xFC, 0x1F, 0xC0, 0x00, 0x00, 0x00, 0x00,
0x00, 0x0F, 0xFF, 0xBF, 0x01, 0xE0, 0x7F, 0x0F, 0xE0, 0xFC, 0x1F, 0xC0, 0xF0, 0x00, 0x00, 0x00,
0x00, 0x0F, 0xFF, 0xBF, 0x83, 0xF8, 0x7F, 0x0F, 0xE0, 0xFC, 0x0F, 0xE0, 0xFE, 0x00, 0x00, 0x00,
0x00, 0x07, 0xFF, 0x3F, 0xC7, 0xF8, 0x7F, 0x0F, 0xE0, 0xFF, 0xCF, 0xF1, 0xFE, 0x00, 0x00, 0x00,
0x00, 0x07, 0xFE, 0x1F, 0xFF, 0xF8, 0x7F, 0x0F, 0xE0, 0xFF, 0xCF, 0xFF, 0xFC, 0x00, 0x00, 0x00,
0x00, 0x03, 0xFE, 0x1F, 0xFF, 0xF0, 0x7F, 0x0F, 0xE0, 0xFF, 0xC7, 0xFF, 0xFC, 0x00, 0x00, 0x00,
0x00, 0x03, 0xFC, 0x0F, 0xFF, 0xE0, 0x7F, 0x0F, 0xE0, 0xFF, 0xC3, 0xFF, 0xF8, 0x00, 0x00, 0x00,
0x00, 0x01, 0xF8, 0x03, 0xFF, 0xC0, 0x7F, 0x0F, 0xE0, 0x7F, 0xC1, 0xFF, 0xE0, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x7F, 0x0F, 0xE0, 0x3F, 0x80, 0x7F, 0x80, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
}; */
/////////////////////////////////
// Setup
void setup() 
{
  Serial.begin(9600); 
  motorPID.SetMode(AUTOMATIC); // Activate the PID controller
  motorPID.SetOutputLimits(-255,255);
  pinMode(MOTOR_LEFT_DIR,OUTPUT);pinMode(MOTOR_RIGHT_DIR,OUTPUT);digitalWrite(MOTOR_LEFT_DIR,LOW);digitalWrite(MOTOR_RIGHT_DIR,LOW);analogWrite(MOTOR_LEFT_PWM,0);analogWrite(MOTOR_RIGHT_PWM,0);
  oled.begin(SSD1306_SWITCHCAPVCC, 0x3C);  // initialize with the I2C addr 0x3C (for the 128x64)
  oled.clearDisplay();
  oled.setTextColor(WHITE);
  //oled.drawBitmap(0,0,elite,128,61,WHITE);
  //oled.display();
  //delay(3000);
  accelInit(1000); // calibrate for 1000 miliseconds
}
/////////////////////////////////
// Main loop
void loop() 
{
  getAccelAngle(); // Read accelerometer
  //motorKp = analogRead(1)>>2; motorKi = analogRead(2)>>2; motorKd = analogRead(3)>>2;
  //motorPID.SetTunings(motorKp,motorKi,motorKd);
  motorPID.Compute(); // run PID controller
  
  // determine motor direction based on motorPWM
  if(motorPWM<0)
  {
	digitalWrite(MOTOR_LEFT_DIR,HIGH);analogWrite(MOTOR_LEFT_PWM,motorPWM+255);
	digitalWrite(MOTOR_RIGHT_DIR,HIGH);analogWrite(MOTOR_RIGHT_PWM,motorPWM+255);
  }
  else 
  {
	digitalWrite(MOTOR_LEFT_DIR,LOW);analogWrite(MOTOR_LEFT_PWM,motorPWM);
	digitalWrite(MOTOR_RIGHT_DIR,LOW);analogWrite(MOTOR_RIGHT_PWM,motorPWM);
  }
  
  
  
  // Send useful information to the oled display
  oled.clearDisplay();
  //oled.drawFastVLine(64, 10, 54, WHITE);
  oled.drawFastHLine(0, 10, 128, WHITE);
  
  oled.setCursor(0,0);
  oled.setTextSize(1);
  oled.print("Kp:");oled.print(motorKp);oled.print("Ki:");oled.print(motorKi);oled.print("Kd:");oled.println(motorKd);
  
  oled.setCursor(0,14);
  //oled.setTextSize(2);
  oled.print("angle: ");oled.print(ax_filtered,1); // Angle in degrees
  
  oled.setCursor(0,26);
  //oled.setTextSize(2);
  oled.print("pwm: ");oled.println(motorPWM,1); // Motor output
  
  oled.display();
  //Serial.print(ax_raw);Serial.print("\t");Serial.print(ay_raw);Serial.print("\t");Serial.print(az_raw);Serial.print("\n");
  //Serial.println(ax);//Serial.print("\t");Serial.print(ay);Serial.print("\t");Serial.print(az);Serial.print("\n");
  //Serial.print(ax_filtered);Serial.print("\t");Serial.println(motorPWM);
}
/////////////////////////////////
// Accelerometer functions
void accelInit(int calibrationTime)
{
	Serial.print("Initializing accelerometer...");
	oled.clearDisplay(); oled.setTextSize(1); oled.setCursor(0,0); oled.print("Initializing..."); oled.display();
	accel.powerOn(); // Calls Wire.begin(); Writes to POWER_CTRL register. Sets measure bit.
	accel.readAccel(&ax_raw, &ay_raw, &az_raw); //read the accelerometer values and store them in variables ax_raw,ay_raw,az_raw
	aoffset_x=ax_raw; aoffset_y=ay_raw; aoffset_z=az_raw; // Sets initial static offset values
	unsigned long stopwatch = millis(); // Start a timer
	while((millis() - stopwatch) < calibrationTime) // stay in loop for 1000 milliseconds
	{
	accel.readAccel(&ax_raw, &ay_raw, &az_raw); //read the accelerometer values and store them in variables ax_raw,ay_raw,az_raw
	aoffset_x=(aoffset_x+ax_raw)/2; aoffset_y=(aoffset_y+ay_raw)/2; aoffset_z=(aoffset_z+az_raw)/2; // Keep a running average of offset
	}
	Serial.println("done");
	oled.println("done"); oled.display();
	delay(1000);
}

void getAccelAngle()
{
	accel.readAccel(&ax_raw, &ay_raw, &az_raw); //read the accelerometer values and store them in variables ax_raw,ay_raw,az_raw
	ax_raw-= aoffset_x; ay_raw-= aoffset_y; az_raw-= aoffset_z - 256; // subtract offset from reading
	ax = ax_raw/512.0; ay = ay_raw/512.0; az = az_raw/512.0; // Normalize to 10 bit limit (+/- 512)
	ax = 180*atan(ay/az)/PI; ay = 180*atan(az/ax)/PI; az = 180*atan(ax/ay)/PI; // Calculate angle in degrees
	ax_filtered = complementaryFilter(ax_filtered, compAlpha, ax);
	ay_filtered = complementaryFilter(ay_filtered, compAlpha, ay);
	az_filtered = complementaryFilter(az_filtered, compAlpha, az);
}
/////////////////////////////////

double complementaryFilter(double a, double alpha, double b)
{
  return a*alpha + b*(1.00-alpha);
}
















